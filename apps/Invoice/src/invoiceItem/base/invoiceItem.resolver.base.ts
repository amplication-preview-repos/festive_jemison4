/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { InvoiceItem } from "./InvoiceItem";
import { InvoiceItemCountArgs } from "./InvoiceItemCountArgs";
import { InvoiceItemFindManyArgs } from "./InvoiceItemFindManyArgs";
import { InvoiceItemFindUniqueArgs } from "./InvoiceItemFindUniqueArgs";
import { CreateInvoiceItemArgs } from "./CreateInvoiceItemArgs";
import { UpdateInvoiceItemArgs } from "./UpdateInvoiceItemArgs";
import { DeleteInvoiceItemArgs } from "./DeleteInvoiceItemArgs";
import { InvoiceItemService } from "../invoiceItem.service";
@graphql.Resolver(() => InvoiceItem)
export class InvoiceItemResolverBase {
  constructor(protected readonly service: InvoiceItemService) {}

  async _invoiceItemsMeta(
    @graphql.Args() args: InvoiceItemCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [InvoiceItem])
  async invoiceItems(
    @graphql.Args() args: InvoiceItemFindManyArgs
  ): Promise<InvoiceItem[]> {
    return this.service.invoiceItems(args);
  }

  @graphql.Query(() => InvoiceItem, { nullable: true })
  async invoiceItem(
    @graphql.Args() args: InvoiceItemFindUniqueArgs
  ): Promise<InvoiceItem | null> {
    const result = await this.service.invoiceItem(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => InvoiceItem)
  async createInvoiceItem(
    @graphql.Args() args: CreateInvoiceItemArgs
  ): Promise<InvoiceItem> {
    return await this.service.createInvoiceItem({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => InvoiceItem)
  async updateInvoiceItem(
    @graphql.Args() args: UpdateInvoiceItemArgs
  ): Promise<InvoiceItem | null> {
    try {
      return await this.service.updateInvoiceItem({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => InvoiceItem)
  async deleteInvoiceItem(
    @graphql.Args() args: DeleteInvoiceItemArgs
  ): Promise<InvoiceItem | null> {
    try {
      return await this.service.deleteInvoiceItem(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
